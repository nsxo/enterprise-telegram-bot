# .pre-commit-config.yaml
# Enterprise Telegram Bot - Code Quality Automation
# Based on architectural review recommendations

repos:
  # Code Formatting (Critical)
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: black
        description: "The uncompromising Python code formatter"
        entry: black
        language: python
        require_serial: true
        types_or: [python, pyi]

  # Linting and Import Sorting (Critical)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.15
    hooks:
      - id: ruff
        name: ruff
        description: "An extremely fast Python linter and code formatter, written in Rust"
        entry: ruff
        language: python
        types: [python]
        args: [--fix]
      - id: ruff-format
        name: ruff-format
        description: "Run ruff formatter"
        entry: ruff
        language: python
        types: [python]
        args: [format]

  # Secret Scanning (Security Critical)
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.1
    hooks:
      - id: gitleaks
        name: gitleaks
        description: "Detect and prevent secrets in git repos"
        entry: gitleaks
        language: golang
        stages: [commit, push]
        args: [detect, --source, ., --verbose]

  # General File Quality (High Priority)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: trailing-whitespace
        description: "Remove trailing whitespace"
        entry: trailing-whitespace-fixer
        language: python
        types: [text]
      
      - id: end-of-file-fixer
        name: end-of-file-fixer
        description: "Ensure files end with a newline"
        entry: end-of-file-fixer
        language: python
        types: [text]
      
      - id: check-yaml
        name: check-yaml
        description: "Check YAML file syntax"
        entry: check-yaml
        language: python
        types: [yaml]
      
      - id: check-json
        name: check-json
        description: "Check JSON file syntax"
        entry: check-json
        language: python
        types: [json]
      
      - id: check-toml
        name: check-toml
        description: "Check TOML file syntax"
        entry: check-toml
        language: python
        types: [toml]
      
      - id: check-merge-conflict
        name: check-merge-conflict
        description: "Check for merge conflict markers"
        entry: check-merge-conflict
        language: python
        types: [text]
      
      - id: check-case-conflict
        name: check-case-conflict
        description: "Check for case conflicts"
        entry: check-case-conflict
        language: python
      
      - id: mixed-line-ending
        name: mixed-line-ending
        description: "Replace mixed line endings"
        entry: mixed-line-ending
        language: python
        types: [text]

  # Python-specific checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-ast
        name: check-ast
        description: "Check Python AST"
        entry: check-ast
        language: python
        types: [python]
      
      - id: debug-statements
        name: debug-statements
        description: "Check for debugger imports and breakpoints"
        entry: debug-statement-hook
        language: python
        types: [python]
      
      - id: name-tests-test
        name: name-tests-test
        description: "Ensure test files are named correctly"
        entry: name-tests-test
        language: python
        files: (^|/)tests/.+\.py$

  # Security and Dependency Checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: bandit
        description: "Security linter for Python"
        entry: bandit
        language: python
        types: [python]
        args: ["-r", "src/", "-ll", "-f", "json", "-o", "bandit-report.json"]
        pass_filenames: false

# Configuration
default_language_version:
  python: python3.11

default_stages: [commit]

# Global excludes
exclude: |
  (?x)^(
      \.git/|
      \.pytest_cache/|
      \.venv/|
      venv/|
      __pycache__/|
      \.pyc$|
      migrations/|
      bandit-report\.json
  )$

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [gitleaks]  # Skip gitleaks on CI since it requires special setup
  submodules: false 